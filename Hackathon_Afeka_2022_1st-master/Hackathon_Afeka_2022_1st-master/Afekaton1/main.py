# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

"""
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(800, 400)
        Form.setMinimumSize(QtCore.QSize(800, 400))
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(690, 60, 91, 20))
        self.pushButton_2.setMinimumSize(QtCore.QSize(91, 20))
        self.pushButton_2.setStyleSheet("border-radius:8px;;\n"
"background-color: #01BFFF;\n"
"color: white;\n"
"font: 11pt;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(10, 0, 750, 41))
        self.label.setMinimumSize(QtCore.QSize(750, 40))
        self.label.setStyleSheet("font-size : 24pt;\n"
"background : #01BFFF;\n"
"color : white;\n"
"border-radius:8px;")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.listWidget = QtWidgets.QListWidget(Form)
        self.listWidget.setGeometry(QtCore.QRect(420, 90, 361, 250))
        self.listWidget.setMinimumSize(QtCore.QSize(361, 250))
        self.listWidget.setObjectName("listWidget")
        self.calendarWidget = QtWidgets.QCalendarWidget(Form)
        self.calendarWidget.setGeometry(QtCore.QRect(20, 90, 381, 251))
        self.calendarWidget.setMinimumSize(QtCore.QSize(381, 251))
        self.calendarWidget.setStyleSheet("font: 12px;")
        self.calendarWidget.setObjectName("calendarWidget")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(420, 360, 361, 17))
        self.pushButton.setMinimumSize(QtCore.QSize(361, 17))
        self.pushButton.setStyleSheet("border-radius : 8px;\n"
"background-color: #01BFFF;\n"
"color: white;\n"
"font: 11pt;")
        self.pushButton.setObjectName("pushButton")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton_2.setText(_translate("Form", "Add New"))
        self.label.setText(_translate("Form", "Daily Task Planner"))
        self.pushButton.setText(_translate("Form", "Save Changes"))
"""
import traceback
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QTime
from PyQt5.QtWidgets import QWidget, QApplication, QCalendarWidget, QListWidgetItem, QTimeEdit

from PyQt5.uic import *     # loadUi
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import *
from PyQt5.QtCore import *


# tasks = [("Calcules 1", False, "123"), ("Liiner Algebra HW2", False, "124"), ("Intro To Java HW1", False, "125"), ("Descrete Mathematics HW3", False, "127"), ("Watch Video", False, "128")]
import Controller

listener = Controller.controller()

class ScreenAdd(QWidget):
    def __init__(self):
        super(ScreenAdd, self).__init__()
        loadUi("mainAdd.ui", self)
        self.chosenDate = None
        self.calendarWidget.selectionChanged.connect(self.calendarDateChanged)
        self.createNewEventBT.clicked.connect(self.on_click_create)
        self.return1.clicked.connect(self.on_click_return)

        for i in range(1, 11):  # tasks:
            self.comboBox1.addItem(str(i))



    def calendarDateChanged(self):
        print("The calender date was changed")
        # dateSelected = self.calendarWidget.selectedDate().toPyDate()
        self.chosenDate = self.calendarWidget.selectedDate().toPyDate().strftime("%Y-%m-%d")
        print("Date selected: ", self.chosenDate)
        self.chosenDate = self.calendarWidget.selectedDate().toPyDate().strftime("%d/%m/%Y")
        self.dateChoosenLabel.setText("Chosen Date: {0} ".format(self.chosenDate))

    def on_click_return(self):
        widget.setCurrentIndex(widget.currentIndex() - 1)

    def on_click_create(self):
        namet = self.textEdit1.toPlainText()
        priority = self.comboBox1.currentText()
        datey = self.chosenDate = self.calendarWidget.selectedDate().toPyDate().strftime("%Y-%m-%d")
        print("hi: ", namet, " ", priority, " ", datey)
        widget.setCurrentIndex(widget.currentIndex() - 1)
        listener.dorCreateEvent(namet, datey, priority)

class Window(QWidget):
    def __init__(self):
        super(Window, self).__init__()
        loadUi("main.ui", self)
        self.calendarWidget.selectionChanged.connect(self.calendarDateChanged)
        # self.updateTaskList()
        # self.dateChoosenLabel
        self.taskListWidget.itemClicked.connect(self.listClicked)
        self.dailyTasks = []
        self.myEvent = None
        self.chosenDate = None
        self.doneBT.clicked.connect(self.on_click)
        self.addNewEventBT.clicked.connect(self.on_click_add)


    def calendarDateChanged(self):
        print("The calender date was changed")
        # dateSelected = self.calendarWidget.selectedDate().toPyDate()
        self.chosenDate = self.calendarWidget.selectedDate().toPyDate().strftime("%Y-%m-%d")
        print("Date selected: ", self.chosenDate)
        myTasks = listener.dorGet(self.chosenDate) #getdor!!!!!!!!!!!!!!!!!!!!!!!!!!!
        print("hi: ", myTasks)
        self.dailyTasks = myTasks
        #send to oded in this format
        self.chosenDate = self.calendarWidget.selectedDate().toPyDate().strftime("%d/%m/%Y")
        self.dateChoosenLabel.setText("Chosen Date: {0} ".format(self.chosenDate))
        self.updateTaskList(self.dailyTasks) # get tasks from model and enter them as list

    def updateTaskList(self, realTasks):
        self.taskListWidget.clear()
        for taskTup in realTasks:  # tasks:
            item = QListWidgetItem(taskTup[0])
            # item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
            # item.setCheckState(QtCore.Qt.Unchecked)
            self.taskListWidget.addItem(item)

    def listClicked(self):
        self.EventNameLabel.setText("Event: {0}".format(self.taskListWidget.selectedIndexes()[0].data()))
        index = self.taskListWidget.selectedIndexes()[0].row()
        eventID = self.dailyTasks[index][2]
        self.myEvent = listener.getEventFromId(eventID, "mail")
        myEventStartTime = listener.getStartTimeFromEvent(self.myEvent)
        myEventEndTime = listener.getEndTimeFromEvent(self.myEvent)
        strStartTime = myEventStartTime.split(':')
        strEndTime = myEventEndTime.split(':')
        startTime = QTime(int(strStartTime[0]), int(strStartTime[1]), int(strStartTime[2]))
        endTime = QTime(int(strEndTime[0]), int(strEndTime[1]), int(strEndTime[2]))
        self.actualStartTimeEdit.setTime(startTime)
        self.actualEndTimeEdit.setTime(endTime)

    def on_click(self):     #MARK AS DONE
        myEventStartTime = listener.getStartTimeFromEvent(self.myEvent)
        print("st")
        myEventStartTimeReal = str(self.actualStartTimeEdit.dateTime().toPyDateTime()).split(" ")[1]
        print("st2")
        myEventEndTimeReal = listener.getEndTimeFromEvent(self.myEvent)
        print("st3")
        myEventEndTime = str(self.actualEndTimeEdit.dateTime().toPyDateTime()).split(" ")[1]
        print("st4")
        print("z ", " ", myEventStartTimeReal, " ", myEventEndTimeReal)
        myEventId = listener.getIdFromEvent(self.myEvent)
        print("z ", myEventId, " ", myEventStartTimeReal, " ", myEventEndTimeReal)
        listener.updateEvent(myEventId, myEventStartTime, myEventEndTime)
        print("z222 ", myEventId, " ", myEventStartTimeReal, " ", myEventEndTimeReal)
        self.updateTaskList(self.dailyTasks)

        #s et send all

    def on_click_add(self):
        widget.setCurrentIndex(widget.currentIndex()+1)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon('Untitled-1.png'))

    widget = QtWidgets.QStackedWidget()
    window = Window()
    screen = ScreenAdd()
    widget.addWidget(window)
    widget.addWidget(screen)
    widget.show()
    # window.show()
    widget.setFixedWidth(2044)
    widget.setFixedHeight(723)
    widget.setWindowTitle("TiMee")
   # widget.setWindowIcon(QtGui.QIcon('Untitled-1.png'))


    sys.exit(app.exec_())





